package org.oscii.neural;

import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Test case for loading word2vec embeddings.
 */
public class EmbeddingContainerTest {
    private static String binFilename = "src/test/resources/en.100.vec";
    private static String txtFilename = "src/test/resources/en.100.vec.txt";

    // These vectors correspond to the binary file, which has different values since the two
    // embedding files were generated by different executions of word2vec.
    private static final String WORD_1 = "problem";
    private static final float[] WORD_1_VEC = {0.18698293f, 0.12919703f, -0.086946085f, 0.19845064f, 0.10567016f};

    private static final String WORD_2 = "such";
    private static final float[] WORD_2_VEC = {0.21387504f, 0.0147088785f, -0.2662169f, 0.2607211f, 0.09815201f};

    private static final float[] AVG_VEC = {0.20042899f, 0.071952954f, -0.1765815f, 0.22958586f, 0.10191108f};

    @Test
    public void testFromTextFile() throws IOException {
        EmbeddingContainer model = EmbeddingContainer.fromTextFile(txtFilename);
        assertEquals(5, model.dimension());
        assertEquals(85, model.vocabSize());
    }

    @Test
    public void testFromBinFileFile() throws IOException {
        EmbeddingContainer model = EmbeddingContainer.fromBinFile(new File(binFilename));
        assertEquals(5, model.dimension());
        assertEquals(85, model.vocabSize());
    }

    @Test
    public void testGetRawVector() throws IOException {
        EmbeddingContainer model = EmbeddingContainer.fromBinFile(new File(binFilename));
        float[] v1 = model.getRawVector(WORD_1);
        assertTrue(Arrays.equals(v1, WORD_1_VEC));
        float[] v2 = model.getRawVector(WORD_2);
        assertTrue(Arrays.equals(v2, WORD_2_VEC));
    }

    @Test
    public void testGetMean() throws IOException {
        EmbeddingContainer model = EmbeddingContainer.fromBinFile(new File(binFilename));
        String[] query = {WORD_1, WORD_2};
        float[] mean = model.getMean(query);
        assertTrue(Arrays.equals(mean, AVG_VEC));
    }

    @Test
    public void testNeighbors() throws Exception {
        float[] one = new float[]{0, 0, 1.1f};
        float[] two = new float[]{0, 1, 0};
        float[] three = new float[]{0, 1, 1.1f};
        float[] four = new float[]{1, 0, 0};
        float[] five = new float[]{1, 0, 1.1f};
        float[] six = new float[]{1, 1, 0};
        String[] vocab = new String[]{"one", "two", "three", "four", "five", "six"};
        float[][] embeddings = new float[][]{one, two, three, four, five, six};
        EmbeddingContainer model = new EmbeddingContainer(vocab, embeddings);
        List<String> nearThree = model.neighbors(three, 5);
        assertEquals(Arrays.asList(new String[]{"three", "one", "two", "five", "six"}), nearThree);
    }
}
